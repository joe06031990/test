// Defines the start of a declarative Jenkins pipeline.
pipeline {
    // Specifies that the pipeline can run on any available Jenkins agent.
    agent any

    // Sets up an automatic schedule for the pipeline to run.
    triggers {
        // 'H/2 * * * *' means the job will run approximately every 2 minutes.
        // Jenkins uses a hash ('H') to spread the load, so it's not exactly on the minute.
        cron('H/2 * * * *')
    }

    // Defines environment variables that will be available throughout the pipeline.
    environment {
        // Securely loads the Grafana API key from Jenkins credentials.
        GRAFANA_API_KEY = credentials('GRAFANA_API_KEY')
        // The URL of your Grafana instance.
        GRAFANA_URL = "https://jstest2025.grafana.net"
        // The name of the root directory where backups will be stored in the Git repository.
        GRAFANA_BACKUP_DIR = "playground_nonprd"
    }

    // Contains all the main work stages of the pipeline.
    stages {
        // The first stage: responsible for checking out code from your Git repository.
        stage('Checkout Git Repository') {
            steps {
                // The 'checkout' step clones or updates the specified Git repository and branch.
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                          userRemoteConfigs: [[credentialsId: 'github-creds1', url: 'https://github.com/joe06031990/test']]])
            }
        }

        // THIS STAGE WILL NOW ONLY RUN ON THE 'master' BRANCH.
        // This is critical for preventing builds on other branches from overwriting the backup.
        stage('Run Grafana Dashboard Backup') {
            when {
                branch 'master'
            }
            steps {
                // A 'script' block allows for more complex Groovy code and logic.
                script {
                    // A multiline string variable in Groovy that holds the entire bash script.
                    def grafanaBackupScriptContent = '''#!/bin/bash
                        # 'set -e' ensures the script will exit immediately if a command fails.
                        set -e
                        # 'set -x' prints each command to the log before it is executed, useful for debugging.
                        set -x
                        
                        CURL_CMD="/usr/bin/curl"
                        JQ_CMD="/usr/bin/jq"

                        # Sanity checks to ensure required tools and variables are present.
                        if [ ! -f "${CURL_CMD}" ]; then
                            echo "Error: 'curl' not found at ${CURL_CMD}. Please install it."
                            exit 1
                        fi
                        if [ ! -f "${JQ_CMD}" ]; then
                            echo "Error: 'jq' not found at ${JQ_CMD}. Please install it."
                            exit 1
                        fi
                        if [ -z "${GRAFANA_URL}" ] || [ -z "${GRAFANA_API_KEY}" ] || [ -z "${GRAFANA_BACKUP_DIR}" ]; then
                            echo "Missing required environment variables."
                            exit 1
                        fi

                        echo "Starting Grafana dashboard backup from ${GRAFANA_URL} to ${GRAFANA_BACKUP_DIR}"

                        # Using additive backup logic. The 'rm -rf' command is intentionally removed
                        # so that existing folders and dashboards are never deleted from the backup.
                        mkdir -p "${GRAFANA_BACKUP_DIR}"

                        # A function to clean up dashboard titles to make them safe for use as filenames.
                        sanitize_filename() {
                            echo "$1" | sed 's/[^a-zA-Z0-9._-]/_/g' | sed 's/__*/_/g' | sed 's/^_//;s/_$//'
                        }

                        # This map is the core of the folder logic. It translates a folder name from Grafana
                        # to a directory path in your Git repository.
                        declare -A GRAFANA_FOLDER_MAP
                        # The key [in brackets] MUST EXACTLY match the folder name in Grafana.
                        # The value on the right is the Git directory path and should not be empty.
                        GRAFANA_FOLDER_MAP["playground"]="playground"
                        GRAFANA_FOLDER_MAP["engineering"]="engineering"
                        GRAFANA_FOLDER_MAP["engineering1"]="engineering1"
                        GRAFANA_FOLDER_MAP["huuhuh"]="huuhuh"
                        GRAFANA_FOLDER_MAP["fff"]="huuhuh/fff"
                        GRAFANA_FOLDER_MAP["j"]="huuhuh/j"
                        GRAFANA_FOLDER_MAP["f"]="huuhuh/fff/f"
                        GRAFANA_FOLDER_MAP["i"]="i"
                        GRAFANA_FOLDER_MAP["experience enginnering"]="experience_engineering"
                        GRAFANA_FOLDER_MAP["Doctor Who"]="Doctor_Who"
                        # This line creates the nested structure by defining the full path.
                        GRAFANA_FOLDER_MAP["This Test"]="experience_engineering/This_Test"

                        # Fetches a list of metadata for all dashboards from the Grafana API.
                        ALL_DASHBOARDS_META=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/search?type=dash-db&query=")

                        PROCESSED_DASHBOARD_UIDS=""

                        # Processes the list of dashboards one by one using a 'while' loop.
                        echo "${ALL_DASHBOARDS_META}" | ${JQ_CMD} -c '.[]' | while read -r DASHBOARD_META_INFO; do
                            # Extracts the dashboard's unique ID, title, and folder title.
                            DASHBOARD_UID=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.uid')
                            DASHBOARD_TITLE=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.title')
                            CLEAN_FOLDER_TITLE=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.folderTitle // "General"' | tr -d '\\n\\r\\t')

                            if [[ "${PROCESSED_DASHBOARD_UIDS}" == *"${DASHBOARD_UID}"* ]]; then
                                continue
                            fi

                            # Checks if the dashboard's folder is in our approved list (the GRAFANA_FOLDER_MAP).
                            TARGET_GIT_RELATIVE_PATH=""
                            if [[ -v GRAFANA_FOLDER_MAP["${CLEAN_FOLDER_TITLE}"] ]]; then
                                # If it is, get the target directory path from the map.
                                TARGET_GIT_RELATIVE_PATH="${GRAFANA_FOLDER_MAP["${CLEAN_FOLDER_TITLE}"]}"
                            else
                                # If the folder is NOT in the map, skip this dashboard and move to the next one.
                                continue
                            fi

                            SANITIZED_DASH_TITLE=$(sanitize_filename "${DASHBOARD_TITLE}")
                            # Build the final save path for the dashboard.
                            CURRENT_SAVE_DIR="${GRAFANA_BACKUP_DIR}"
                            if [ -n "${TARGET_GIT_RELATIVE_PATH}" ]; then
                                CURRENT_SAVE_DIR="${GRAFANA_BACKUP_DIR}/${TARGET_GIT_RELATIVE_PATH}"
                            fi
                            # Create the destination directory if it doesn't already exist.
                            mkdir -p "${CURRENT_SAVE_DIR}"

                            filename="${SANITIZED_DASH_TITLE}.json"
                            filepath="${CURRENT_SAVE_DIR}/${filename}"

                            # Fetches the full JSON content for this specific dashboard.
                            DASHBOARD_DATA=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/dashboards/uid/${DASHBOARD_UID}")
                            
                            # Saves the dashboard's JSON data to the file, but only if the data is valid.
                            if [ -n "${DASHBOARD_DATA}" ] && [ "$(${JQ_CMD} -r '.dashboard.title' <<< "${DASHBOARD_DATA}")" != "null" ]; then
                                echo "${DASHBOARD_DATA}" | ${JQ_CMD} -r '.dashboard' > "${filepath}"
                                PROCESSED_DASHBOARD_UIDS="${PROCESSED_DASHBOARD_UIDS} ${DASHBOARD_UID}"
                            fi
                        done

                        echo "Backup complete."
                    '''

                    // Writes the bash script content into a file on the Jenkins agent.
                    writeFile(file: 'run_grafana_backup.sh', text: grafanaBackupScriptContent)
                    // Makes the script file executable.
                    sh 'chmod +x run_grafana_backup.sh'
                    // Executes the bash script.
                    sh 'bash ./run_grafana_backup.sh'
                }
            }
        }

        // THIS STAGE WILL NOW ONLY RUN ON THE 'master' BRANCH.
        stage('Commit and Push Changes to Git') {
            when {
                branch 'master'
            }
            steps {
                script {
                    sh "git config user.email 'jenkins@example.com'"
                    sh "git config user.name 'Jenkins Automated Backup'"
                    sh "git add ${env.GRAFANA_BACKUP_DIR}"

                    // Checks if there are any actual changes to commit. This prevents empty commits.
                    def changes = sh(returnStatus: true, script: "git diff-index --quiet HEAD -- ${env.GRAFANA_BACKUP_DIR}")
                    
                    if (changes != 0) {
                        // Commits the changes with a timestamp. The '\$' escapes the dollar sign for Groovy,
                        // allowing the shell to correctly execute the 'date' command.
                        sh "git commit -m 'Grafana Dashboards Backup - \$(date +%Y-%m-%d_%H-%M-%S)'"
                        
                        // A secure wrapper to use credentials (like a GitHub PAT) within this block.
                        withCredentials([string(credentialsId: 'github-creds1', variable: 'GIT_PAT')]) {
                            // Pushes the new commit to the 'master' branch of the remote repository.
                            sh '''
                                git remote set-url origin https://github.com/joe06031990/test
                                git config credential.helper store
                                echo "https://${GIT_PAT}:@github.com" > ~/.git-credentials
                                git push origin HEAD:master
                            '''
                        }
                    } else {
                        echo "No changes detected."
                    }
                }
            }
        }
    }

    // The 'post' section defines actions that run at the end of the pipeline.
    post {
        // 'always' means this action will run regardless of whether the pipeline succeeded or failed.
        always {
            // 'cleanWs' deletes all files from the workspace, ensuring a clean start for the next run.
            cleanWs()
        }
    }
}
