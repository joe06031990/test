pipeline {
    agent any

    triggers {
        cron('H/2 * * * *')  // Run every 2 minutes
    }

    environment {
        GRAFANA_API_KEY = credentials('GRAFANA_API_KEY')
        GRAFANA_URL = "https://jstest2025.grafana.net"
        GRAFANA_BACKUP_DIR = "playground_nonprd" // This is the Git directory where the relevant backups will go
    }

    stages {
        stage('Checkout Git Repository') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                          userRemoteConfigs: [[credentialsId: 'github-creds1', url: 'https://github.com/joe06031990/test']]])
            }
        }

        stage('Run Grafana Dashboard Backup') {
            steps {
                script {
                    def grafanaBackupScriptContent = '''#!/bin/bash
                        set -e
                        set -x # Keep debugging enabled for this run

                        CURL_CMD="/usr/bin/curl"
                        JQ_CMD="/usr/bin/jq"

                        if [ ! -f "${CURL_CMD}" ]; then
                            echo "Error: 'curl' not found at ${CURL_CMD}. Please install it on the Jenkins agent."
                            exit 1
                        fi
                        if [ ! -f "${JQ_CMD}" ]; then
                            echo "Error: 'jq' not found at ${JQ_CMD}. Please install it on the Jenkins agent."
                            exit 1
                        fi

                        if [ -z "${GRAFANA_URL}" ] || [ -z "${GRAFANA_API_KEY}" ] || [ -z "${GRAFANA_BACKUP_DIR}" ]; then
                            echo "Missing required environment variables."
                            exit 1
                        fi

                        echo "Starting Grafana dashboard backup from ${GRAFANA_URL} to Git path ${GRAFANA_BACKUP_DIR}"

                        if [ -d "${GRAFANA_BACKUP_DIR}" ]; then
                            echo "Clearing existing backup directory: ${GRAFANA_BACKUP_DIR}"
                            rm -rf "${GRAFANA_BACKUP_DIR}"
                        fi
                        mkdir -p "${GRAFANA_BACKUP_DIR}"
                        echo "Created backup directory: ${GRAFANA_BACKUP_DIR}"

                        sanitize_filename() {
                            echo "$1" | sed 's/[^a-zA-Z0-9._-]/_/g' | sed 's/__*/_/g' | sed 's/^_//;s/_$//'
                        }

                        # --- Explicit Map-based Folder Filtering and Path Building ---
                        # CRITICAL FIX: Initialize GRAFANA_FOLDER_MAP on a single line for robustness.
                        # Add ALL known folder titles and their full desired relative Git paths here.
                        # Format: ["GrafanaTitle"]="path/in/git"
                        declare -A GRAFANA_FOLDER_MAP=( ["playground"]="" ["huuhuh"]="huuhuh" ["fff"]="huuhuh/fff" ["f"]="huuhuh/fff/f" ["dre"]="huuhuh/fff/f/dre" ["engineering"]="engineering" ["engineering1"]="engineering1" ["i"]="i" ["j"]="j" ["experience enginnering"]="experience_enginnering" )

                        echo "--- Fetching All Dashboards from Grafana ---"
                        ALL_DASHBOARDS_META=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/search?type=dash-db&query=")
                        echo "${ALL_DASHBOARDS_META}" | ${JQ_CMD} . 
                        echo "--- End All Dashboards ---"

                        PROCESSED_DASHBOARD_UIDS=""

                        echo "${ALL_DASHBOARDS_META}" | ${JQ_CMD} -c '.[]' | while read -r DASHBOARD_META_INFO; do
                            DASHBOARD_UID=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.uid')
                            DASHBOARD_TITLE=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.title')
                            
                            CLEAN_FOLDER_TITLE=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.folderTitle // "General"' | tr -d '\n\r\t ')
                            CLEAN_FOLDER_TITLE_FOR_MAP_LOOKUP=$(sanitize_filename "${CLEAN_FOLDER_TITLE}")

                            if [[ "${PROCESSED_DASHBOARD_UIDS}" == *"${DASHBOARD_UID}"* ]]; then
                                echo "  Skipping already processed dashboard: ${DASHBOARD_TITLE} (UID: ${DASHBOARD_UID})"
                                continue
                            fi

                            # --- FILTERING AND PATH DETERMINATION LOGIC BASED ON FOLDER TITLE MAP ---
                            TARGET_GIT_RELATIVE_PATH="" 
                            
                            if [[ -v GRAFANA_FOLDER_MAP["${CLEAN_FOLDER_TITLE_FOR_MAP_LOOKUP}"] ]]; then
                                TARGET_GIT_RELATIVE_PATH="${GRAFANA_FOLDER_MAP["${CLEAN_FOLDER_TITLE_FOR_MAP_LOOKUP}"]}"
                                echo "--- DEBUG FILTER BEGIN for '${DASHBOARD_TITLE}' (UID: ${DASHBOARD_UID}) ---"
                                echo "  Dashboard'\''s FOLDER_TITLE (cleaned): '\''${CLEAN_FOLDER_TITLE}'\'''"
                                echo "  Folder title used for MAP lookup: '\''${CLEAN_FOLDER_TITLE_FOR_MAP_LOOKUP}'\'''"
                                echo "  MATCH: Folder title found in map. Relative Git path: '\''${TARGET_GIT_RELATIVE_PATH}'\'''"
                                echo "  Decision: PROCESS this dashboard."
                                echo "--- DEBUG FILTER END ---"
                            else
                                echo "--- DEBUG FILTER BEGIN for '${DASHBOARD_TITLE}' (UID: ${DASHBOARD_UID}) ---"
                                echo "  Dashboard'\''s FOLDER_TITLE (cleaned): '\''${CLEAN_FOLDER_TITLE}'\'''"
                                echo "  Folder title used for MAP lookup: '\''${CLEAN_FOLDER_TITLE_FOR_MAP_LOOKUP}'\'''"
                                echo "  NO MATCH: Folder title not found in target hierarchy map. Skipping dashboard."
                                echo "--- DEBUG FILTER END ---"
                                continue 
                            fi
                            # --- END FILTERING AND PATH DETERMINATION LOGIC ---

                            SANITIZED_DASH_TITLE=$(sanitize_filename "${DASHBOARD_TITLE}")
                            
                            CURRENT_SAVE_DIR="${GRAFANA_BACKUP_DIR}" 
                            if [ -n "${TARGET_GIT_RELATIVE_PATH}" ]; then 
                                CURRENT_SAVE_DIR="${GRAFANA_BACKUP_DIR}/${TARGET_GIT_RELATIVE_PATH}"
                            fi
                            mkdir -p "${CURRENT_SAVE_DIR}"

                            filename="${SANITIZED_DASH_TITLE}.json"
                            filepath="${CURRENT_SAVE_DIR}/${filename}"

                            DASHBOARD_DATA=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${
