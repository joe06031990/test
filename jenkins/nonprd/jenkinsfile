// Defines the start of a declarative Jenkins pipeline.
pipeline {
    // Specifies that the pipeline can run on any available Jenkins agent.
    agent any

    // Sets up an automatic schedule for the pipeline to run.
    triggers {
        // 'H/2 * * * *' means the job will run approximately every 2 minutes.
        cron('H/2 * * * *')
    }

    // Defines environment variables that will be available throughout the pipeline.
    environment {
        // Securely loads the Grafana API key from Jenkins credentials.
        GRAFANA_API_KEY = credentials('GRAFANA_API_KEY')
        // The URL of your Grafana instance.
        GRAFANA_URL = "https://jstest2025.grafana.net"
        // The name of the root directory where backups will be stored in the Git repository.
        GRAFANA_BACKUP_DIR = "playground_nonprd"
    }

    // Contains all the main work stages of the pipeline.
    stages {
        // The first stage: responsible for checking out code from your Git repository.
        stage('Checkout Git Repository') {
            steps {
                // The 'checkout' step clones or updates the specified Git repository and branch.
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                          userRemoteConfigs: [[credentialsId: 'github-creds1', url: 'https://github.com/joe06031990/test']]])
            }
        }

        // THIS STAGE WILL NOW ONLY RUN ON THE 'master' BRANCH.
        stage('Run Grafana Dashboard Backup') {
            when {
                branch 'master'
            }
            steps {
                // A 'script' block allows for more complex Groovy code and logic.
                script {
                    // A multiline string variable in Groovy that holds the entire bash script.
                    def grafanaBackupScriptContent = '''#!/bin/bash
                        # 'set -e' ensures the script will exit immediately if a command fails.
                        set -e
                        # 'set -x' prints each command to the log before it is executed, useful for debugging.
                        set -x

                        CURL_CMD="/usr/bin/curl"
                        JQ_CMD="/usr/bin/jq"

                        # Sanity checks
                        if [ -z "${GRAFANA_URL}" ] || [ -z "${GRAFANA_API_KEY}" ] || [ -z "${GRAFANA_BACKUP_DIR}" ]; then
                            echo "Missing required environment variables."
                            exit 1
                        fi

                        # === NEW: Define the list of folder names to back up ===
                        # You must manually add the names of new folders to this list.
                        # These are all the folders considered to be in the "playground" group.
                        declare -a FOLDERS_TO_BACKUP=(
                            "playground"
                            "engineering"
                            "engineering1"
                            "experience enginnering"
                            "This Test"
                            "huuhuh"
                            "j"
                            "fff"
                            "f"
                            "dre"
                            "i"
                            "Doctor Who"
                        )

                        echo "Starting Grafana dashboard backup..."
                        echo "Will only back up dashboards from the predefined list of folders."

                        # This command enables "mirror" mode by deleting the old backup directory.
                        rm -rf "${GRAFANA_BACKUP_DIR}"
                        mkdir -p "${GRAFANA_BACKUP_DIR}"

                        # A function to clean up titles to make them safe for use as filenames or directory names.
                        sanitize() {
                            echo "$1" | sed 's/[^a-zA-Z0-9._-]/_/g' | sed 's/__*/_/g' | sed 's/^_//;s/_$//'
                        }

                        # Fetches a list of metadata for all dashboards from the Grafana API.
                        ALL_DASHBOARDS_META=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/search?type=dash-db")

                        # Processes the list of dashboards one by one using a 'while' loop.
                        echo "${ALL_DASHBOARDS_META}" | ${JQ_CMD} -c '.[]' | while read -r DASHBOARD_META_INFO; do
                            DASHBOARD_UID=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.uid')
                            DASHBOARD_TITLE=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.title')
                            
                            GRAFANA_FOLDER_TITLE=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.folderTitle // empty')

                            # Check if the dashboard's folder is in our list of folders to back up.
                            folder_in_list=false
                            for folder in "${FOLDERS_TO_BACKUP[@]}"; do
                                if [[ "$folder" == "${GRAFANA_FOLDER_TITLE}" ]]; then
                                    folder_in_list=true
                                    break
                                fi
                            done

                            if [ "$folder_in_list" = false ]; then
                                echo "Skipping dashboard '${DASHBOARD_TITLE}' because its folder '${GRAFANA_FOLDER_TITLE}' is not in the backup list."
                                continue
                            fi

                            # If the folder is in the list, proceed with the backup.
                            SANITIZED_FOLDER_NAME=$(sanitize "${GRAFANA_FOLDER_TITLE}")
                            CURRENT_SAVE_DIR="${GRAFANA_BACKUP_DIR}/${SANITIZED_FOLDER_NAME}"
                            mkdir -p "${CURRENT_SAVE_DIR}"

                            SANITIZED_DASH_TITLE=$(sanitize "${DASHBOARD_TITLE}")
                            filename="${SANITIZED_DASH_TITLE}.json"
                            filepath="${CURRENT_SAVE_DIR}/${filename}"

                            echo "Backing up dashboard '${DASHBOARD_TITLE}' from folder '${GRAFANA_FOLDER_TITLE}' to '${filepath}'"

                            DASHBOARD_DATA=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/dashboards/uid/${DASHBOARD_UID}")
                            
                            if [ -n "${DASHBOARD_DATA}" ] && [ "$(${JQ_CMD} -r '.dashboard.title' <<< "${DASHBOARD_DATA}")" != "null" ]; then
                                echo "${DASHBOARD_DATA}" | ${JQ_CMD} -r '.dashboard' > "${filepath}"
                            fi
                        done

                        echo "Backup complete."
                    '''

                    writeFile(file: 'run_grafana_backup.sh', text: grafanaBackupScriptContent)
                    sh 'chmod +x run_grafana_backup.sh'
                    sh 'bash ./run_grafana_backup.sh'
                }
            }
        }

        // Stage to commit and push changes
        stage('Commit and Push Changes to Git') {
            when {
                branch 'master'
            }
            steps {
                script {
                    sh "git config user.email 'jenkins@example.com'"
                    sh "git config user.name 'Jenkins Automated Backup'"
                    sh "git add --all ${env.GRAFANA_BACKUP_DIR}"

                    def changes = sh(returnStatus: true, script: "git diff-index --quiet HEAD -- ${env.GRAFANA_BACKUP_DIR}")
                    
                    if (changes != 0) {
                        sh 'git commit -m "Grafana Dashboards Backup - $(date +%Y-%m-%d_%H-%M-%S)"'
                        
                        withCredentials([string(credentialsId: 'github-creds1', variable: 'GIT_PAT')]) {
                            sh '''
                                git remote set-url origin https://github.com/joe06031990/test
                                git config credential.helper store
                                echo "https://${GIT_PAT}:@github.com" > ~/.git-credentials
                                git push origin HEAD:master
                            '''
                        }
                    } else {
                        echo "No changes detected."
                    }
                }
            }
        }
    }

    // Post-build actions
    post {
        always {
            cleanWs()
        }
    }
}
