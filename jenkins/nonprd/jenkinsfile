pipeline {
    agent any

    triggers {
        cron('H/2 * * * *')  // Run every 2 minutes
    }

    environment {
        GRAFANA_API_KEY = credentials('GRAFANA_API_KEY')
        GRAFANA_URL = "https://jstest2025.grafana.net"
        GRAFANA_BACKUP_DIR = "playground_nonprd"
    }

    stages {
        stage('Checkout Git Repository') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/master']],
                          userRemoteConfigs: [[credentialsId: 'github-creds1', url: 'https://github.com/joe06031990/test']]])
            }
        }

        stage('Run Grafana Dashboard Backup') {
            steps {
                script {
                    def grafanaBackupScriptContent = '''#!/bin/bash
set -e
set -x

CURL_CMD="/usr/bin/curl"
JQ_CMD="/usr/bin/jq"

if [ ! -f "${CURL_CMD}" ]; then
    echo "Error: 'curl' not found at ${CURL_CMD}. Please install it on the Jenkins agent."
    exit 1
fi
if [ ! -f "${JQ_CMD}" ]; then
    echo "Error: 'jq' not found at ${JQ_CMD}. Please install it on the Jenkins agent."
    exit 1
fi

if [ -z "${GRAFANA_URL}" ] || [ -z "${GRAFANA_API_KEY}" ] || [ -z "${GRAFANA_BACKUP_DIR}" ]; then
    echo "Missing required environment variables."
    exit 1
fi

echo "Starting Grafana dashboard backup from ${GRAFANA_URL} to Git path ${GRAFANA_BACKUP_DIR}"

if [ -d "${GRAFANA_BACKUP_DIR}" ]; then
    echo "Clearing existing backup directory: ${GRAFANA_BACKUP_DIR}"
    rm -rf "${GRAFANA_BACKUP_DIR}"
fi
mkdir -p "${GRAFANA_BACKUP_DIR}"
echo "Created backup directory: ${GRAFANA_BACKUP_DIR}"

sanitize_filename() {
    echo "$1" | sed 's/[^a-zA-Z0-9._-]/_/g' | sed 's/__*/_/g' | sed 's/^_//;s/_$//'
}

declare -A GRAFANA_FOLDER_MAP=( 
    ["playground"]="" 
    ["huuhuh"]="huuhuh" 
    ["fff"]="huuhuh/fff" 
    ["f"]="huuhuh/fff/f" 
    ["dre"]="huuhuh/fff/f/dre" 
    ["engineering"]="engineering" 
    ["engineering1"]="engineering1" 
    ["i"]="i" 
    ["j"]="j" 
    ["experience enginnering"]="experience_enginnering" 
)

echo "--- Fetching All Dashboards from Grafana ---"
ALL_DASHBOARDS_META=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/search?type=dash-db&query=")
echo "${ALL_DASHBOARDS_META}" | ${JQ_CMD} . 
echo "--- End All Dashboards ---"

# Print all distinct folder titles for analysis
echo "→ ALL folder titles returned by Grafana:"
echo "${ALL_DASHBOARDS_META}" | ${JQ_CMD} -r '.[].folderTitle // "General"' | sort | uniq

PROCESSED_DASHBOARD_UIDS=""
UNMAPPED_FOLDERS_LOG="${GRAFANA_BACKUP_DIR}/unmapped_folders.txt"
: > "${UNMAPPED_FOLDERS_LOG}"

echo "${ALL_DASHBOARDS_META}" | ${JQ_CMD} -c '.[]' | while read -r DASHBOARD_META_INFO; do
    DASHBOARD_UID=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.uid')
    DASHBOARD_TITLE=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.title')

    RAW_FOLDER_TITLE=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.folderTitle // "General"')
    CLEAN_FOLDER_TITLE=$(echo "${RAW_FOLDER_TITLE}" | tr -d '\n\r\t ')
    CLEAN_FOLDER_TITLE_FOR_MAP_LOOKUP=$(sanitize_filename "${CLEAN_FOLDER_TITLE}")

    echo "→ Dashboard: '${DASHBOARD_TITLE}' | Folder: '${RAW_FOLDER_TITLE}' (lookup key: '${CLEAN_FOLDER_TITLE_FOR_MAP_LOOKUP}')"

    if [[ "${PROCESSED_DASHBOARD_UIDS}" == *"${DASHBOARD_UID}"* ]]; then
        echo "  Skipping already processed dashboard: ${DASHBOARD_TITLE} (UID: ${DASHBOARD_UID})"
        continue
    fi

    TARGET_GIT_RELATIVE_PATH=""

    if [[ -v GRAFANA_FOLDER_MAP["${CLEAN_FOLDER_TITLE_FOR_MAP_LOOKUP}"] ]]; then
        TARGET_GIT_RELATIVE_PATH="${GRAFANA_FOLDER_MAP["${CLEAN_FOLDER_TITLE_FOR_MAP_LOOKUP}"]}"
        echo "  MATCHED folder. Path: '${TARGET_GIT_RELATIVE_PATH}'"
    else
        echo "  ❌ NO MATCH: Skipping dashboard. Logging folder '${CLEAN_FOLDER_TITLE}'"
        echo "${CLEAN_FOLDER_TITLE}" >> "${UNMAPPED_FOLDERS_LOG}"
        continue
    fi

    SANITIZED_DASH_TITLE=$(sanitize_filename "${DASHBOARD_TITLE}")
    CURRENT_SAVE_DIR="${GRAFANA_BACKUP_DIR}"
    if [ -n "${TARGET_GIT_RELATIVE_PATH}" ]; then 
        CURRENT_SAVE_DIR="${GRAFANA_BACKUP_DIR}/${TARGET_GIT_RELATIVE_PATH}"
    fi
    mkdir -p "${CURRENT_SAVE_DIR}"

    filename="${SANITIZED_DASH_TITLE}.json"
    filepath="${CURRENT_SAVE_DIR}/${filename}"

    DASHBOARD_DATA=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/dashboards/uid/${DASHBOARD_UID}")

    if [ -n "${DASHBOARD_DATA}" ] && [ "$(${JQ_CMD} -r '.dashboard.title' <<< "${DASHBOARD_DATA}")" != "null" ]; then
        echo "  Exporting dashboard: ${DASHBOARD_TITLE} to ${filepath}"
        echo "${DASHBOARD_DATA}" | ${JQ_CMD} -r '.dashboard' > "${filepath}"
        PROCESSED_DASHBOARD_UIDS="${PROCESSED_DASHBOARD_UIDS} ${DASHBOARD_UID}"
    else
        echo "  Warning: Could not get JSON for dashboard ${DASHBOARD_TITLE}. Skipping."
    fi
done

echo "Grafana dashboard backup process complete."
'''

                    writeFile(file: 'run_grafana_backup.sh', text: grafanaBackupScriptContent)
                    sh 'chmod +x run_grafana_backup.sh'
                    sh './run_grafana_backup.sh'
                }
            }
        }

        stage('Commit and Push Changes to Git') {
            steps {
                script {
                    sh "git config user.email 'jenkins@example.com'"
                    sh "git config user.name 'Jenkins Automated Backup'" 

                    echo "--- Files in ${env.GRAFANA_BACKUP_DIR} before git add ---"
                    sh "ls -R ${env.GRAFANA_BACKUP_DIR}"
                    echo "--- End files list ---"

                    sh "git add ${env.GRAFANA_BACKUP_DIR}"
                    def changes = sh(returnStatus: true, script: "git diff-index --quiet HEAD -- ${env.GRAFANA_BACKUP_DIR}")

                    if (changes != 0) {
                        sh "git commit -m 'Grafana Dashboards Backup - \$(date +%Y-%m-%d_%H-%M-%S)'"
                        echo "Changes committed locally."

                        withCredentials([string(credentialsId: 'github-creds1', variable: 'GIT_PAT')]) {
                            sh "git push https://joe06031990:${GIT_PAT}@github.com/joe06031990/test HEAD:master"
                        }
                        echo "Changes pushed to remote Git repository."
                    } else {
                        echo "No changes detected in Grafana dashboards. Nothing to commit."
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
