pipeline {
    agent any

    environment {
        GRAFANA_API_KEY = credentials('GRAFANA_API_KEY')
        GRAFANA_URL = "https://jstest2025.grafana.net"
        GRAFANA_BACKUP_DIR = "playground_nonprd"
    }

    stages {
        stage('Checkout Git Repository') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                          userRemoteConfigs: [[credentialsId: 'github-creds1', url: 'https://github.com/joe06031990/test']]])
            }
        }

        stage('Run Grafana Dashboard Backup') {
            when {
                branch 'master'
            }
            steps {
                script {
                    def grafanaBackupScriptContent = '''#!/bin/bash
                        set -e
                        set -x

                        CURL_CMD="/usr/bin/curl"
                        JQ_CMD="/usr/bin/jq"

                        if [ ! -f "${CURL_CMD}" ]; then
                            echo "Error: 'curl' not found at ${CURL_CMD}. Please install it."
                            exit 1
                        fi
                        if [ ! -f "${JQ_CMD}" ]; then
                            echo "Error: 'jq' not found at ${JQ_CMD}. Please install it."
                            exit 1
                        fi
                        if [ -z "${GRAFANA_URL}" ] || [ -z "${GRAFANA_API_KEY}" ] || [ -z "${GRAFANA_BACKUP_DIR}" ]; then
                            echo "Missing required environment variables."
                            exit 1
                        fi

                        echo "Starting Grafana dashboard backup from ${GRAFANA_URL} to ${GRAFANA_BACKUP_DIR}"

                        rm -rf "${GRAFANA_BACKUP_DIR}"
                        mkdir -p "${GRAFANA_BACKUP_DIR}"

                        sanitize_filename() {
                            echo "$1" | sed 's/[^a-zA-Z0-9._-]/_/g' | sed 's/__*/_/g' | sed 's/^_//;s/_$//'
                        }

                        # Fetch all folders and build a UID->path map
                        ALL_FOLDERS=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/folders")
                        echo "${ALL_FOLDERS}" | ${JQ_CMD} -r '.[] | [.uid, .title, (.parentUid // "")] | @tsv' > /tmp/folders.tsv

                        declare -A FOLDER_PATHS

                        # First, map all folders by UID
                        while IFS=$'\\t' read -r uid title parent; do
                            FOLDER_PATHS["$uid"]="$title"
                        done < /tmp/folders.tsv

                        # Now, recursively build full paths
                        get_full_path() {
                            local uid="$1"
                            local path=""
                            while [ -n "$uid" ]; do
                                local line
                                line=$(grep "^$uid\\t" /tmp/folders.tsv)
                                local title parent
                                title=$(echo "$line" | cut -f2)
                                parent=$(echo "$line" | cut -f3)
                                path="/$title$path"
                                uid="$parent"
                            done
                            echo "$path"
                        }

                        # Fetch dashboards
                        ALL_DASHBOARDS_META=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/search?type=dash-db&query=")

                        echo "${ALL_DASHBOARDS_META}" | ${JQ_CMD} -c '.[]' | while read -r DASHBOARD_META_INFO; do
                            DASHBOARD_UID=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.uid')
                            DASHBOARD_TITLE=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.title')
                            FOLDER_UID=$(echo "${DASHBOARD_META_INFO}" | ${JQ_CMD} -r '.folderUid // empty')

                            # Build the full folder path
                            if [ -n "$FOLDER_UID" ]; then
                                FULL_PATH=$(get_full_path "$FOLDER_UID" | sed 's|^/||')
                            else
                                FULL_PATH="General"
                            fi

                            # Only process dashboards in playground or its subfolders
                            if [[ "$FULL_PATH" != playground* ]]; then
                                echo "Skipping dashboard '${DASHBOARD_TITLE}' in folder '${FULL_PATH}'"
                                continue
                            fi

                            SANITIZED_DASH_TITLE=$(sanitize_filename "${DASHBOARD_TITLE}")
                            SAVE_DIR="${GRAFANA_BACKUP_DIR}/${FULL_PATH}"
                            mkdir -p "${SAVE_DIR}"

                            filename="${SANITIZED_DASH_TITLE}.json"
                            filepath="${SAVE_DIR}/${filename}"

                            DASHBOARD_DATA=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/dashboards/uid/${DASHBOARD_UID}")
                            if [ -n "${DASHBOARD_DATA}" ] && [ "$(${JQ_CMD} -r '.dashboard.title' <<< "${DASHBOARD_DATA}")" != "null" ]; then
                                echo "${DASHBOARD_DATA}" | ${JQ_CMD} -r '.dashboard' > "${filepath}"
                                echo " Saved: ${filepath}"
                            fi
                        done

                        rm -f /tmp/folders.tsv
                        echo "Backup complete!"
                    '''

                    writeFile(file: 'run_grafana_backup.sh', text: grafanaBackupScriptContent)
                    sh 'chmod +x run_grafana_backup.sh'
                    sh 'bash ./run_grafana_backup.sh'
                }
            }
        }

        stage('Commit and Push Changes to Git') {
            when {
                branch 'master'
            }
            steps {
                script {
                    sh "git config user.email 'jenkins@test.com'"
                    sh "git config user.name 'Jenkins Automated Backup'"
                    sh "git add --all ${env.GRAFANA_BACKUP_DIR}"

                    def changes = sh(returnStatus: true, script: "git diff-index --quiet HEAD -- ${env.GRAFANA_BACKUP_DIR}")
                    
                    if (changes != 0) {
                        sh 'git commit -m "Grafana Dashboards Backup - $(date +%Y-%m-%d_%H-%M-%S)"'
                        withCredentials([string(credentialsId: 'github-creds1', variable: 'GIT_PAT')]) {
                            sh '''
                                git remote set-url origin https://github.com/joe06031990/test
                                git config credential.helper store
                                echo "https://${GIT_PAT}:@github.com" > ~/.git-credentials
                                git push origin HEAD:master
                            '''
                        }
                    } else {
                        echo "No changes detected."
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
