// Defines the start of a declarative Jenkins pipeline.
pipeline {
    // Specifies that the pipeline can run on any available Jenkins agent.
    agent any

    // Sets up an automatic schedule for the pipeline to run.
    triggers {
        // 'H/2 * * * *' means the job will run approximately every 2 minutes.
        cron('H/2 * * * *')
    }

    // Defines environment variables that will be available throughout the pipeline.
    environment {
        // Securely loads the Grafana API key from Jenkins credentials.
        GRAFANA_API_KEY = credentials('GRAFANA_API_KEY')
        // The URL of your Grafana instance.
        GRAFANA_URL = "https://jstest2025.grafana.net"
        // The name of the root directory where backups will be stored in the Git repository.
        GRAFANA_BACKUP_DIR = "playground_nonprd"
        // The name of the top-level Grafana folder you want to back up.
        GRAFANA_ROOT_FOLDER = "playground"
    }

    // Contains all the main work stages of the pipeline.
    stages {
        // The first stage: responsible for checking out code from your Git repository.
        stage('Checkout Git Repository') {
            steps {
                // The 'checkout' step clones or updates the specified Git repository and branch.
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                          userRemoteConfigs: [[credentialsId: 'github-creds1', url: 'https://github.com/joe06031990/test']]])
            }
        }

        // This stage performs the backup and will only run on the 'master' branch.
        stage('Run Grafana Dashboard Backup') {
            when {
                branch 'master'
            }
            steps {
                // A 'script' block allows for more complex Groovy code and logic.
                script {
                    // The new backup script with automatic folder discovery.
                    def grafanaBackupScriptContent = '''#!/bin/bash
                        # Exit immediately if a command fails (-e) and print commands before executing (-x).
                        set -e
                        set -x

                        # --- Configuration and Tool Paths ---
                        CURL_CMD="/usr/bin/curl"
                        JQ_CMD="/usr/bin/jq"

                        # --- Sanity Checks ---
                        if [ ! -f "${CURL_CMD}" ]; then
                            echo "Error: 'curl' not found at ${CURL_CMD}. Please install it." && exit 1
                        fi
                        if [ ! -f "${JQ_CMD}" ]; then
                            echo "Error: 'jq' not found at ${JQ_CMD}. Please install it." && exit 1
                        fi
                        if [ -z "${GRAFANA_URL}" ] || [ -z "${GRAFANA_API_KEY}" ] || [ -z "${GRAFANA_BACKUP_DIR}" ] || [ -z "${GRAFANA_ROOT_FOLDER}" ]; then
                            echo "Error: Missing required environment variables (GRAFANA_URL, GRAFANA_API_KEY, GRAFANA_BACKUP_DIR, GRAFANA_ROOT_FOLDER)." && exit 1
                        fi

                        echo "Starting Grafana dashboard backup from ${GRAFANA_URL}"
                        echo "Root folder for backup: '${GRAFANA_ROOT_FOLDER}' -> Target directory: '${GRAFANA_BACKUP_DIR}'"

                        # Ensure the backup directory is clean for a fresh backup.
                        rm -rf "${GRAFANA_BACKUP_DIR}"
                        mkdir -p "${GRAFANA_BACKUP_DIR}"

                        # --- Helper Functions ---

                        # Sanitizes a string to be a valid file or directory name.
                        sanitize_filename() {
                            echo "$1" | sed 's/[^a-zA-Z0-9._-]/_/g' | sed 's/__*/_/g' | sed 's/^_//;s/_$//'
                        }

                        # Recursively processes a folder's contents (sub-folders and dashboards).
                        process_folder() {
                            local folder_uid="$1"
                            local current_path="$2"

                            echo ">>> Processing Folder UID: ${folder_uid} into Path: ${current_path}"
                            mkdir -p "${current_path}"

                            # Get contents of the folder (dashboards and sub-folders) using its UID.
                            local folder_contents
                            folder_contents=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/search?folderUids=${folder_uid}")

                            # Loop through each item in the folder's contents.
                            echo "${folder_contents}" | ${JQ_CMD} -c '.[]' | while IFS= read -r item; do
                                local item_type item_uid item_title sanitized_title
                                item_type=$(echo "${item}" | ${JQ_CMD} -r '.type')
                                item_uid=$(echo "${item}" | ${JQ_CMD} -r '.uid')
                                item_title=$(echo "${item}" | ${JQ_CMD} -r '.title')
                                sanitized_title=$(sanitize_filename "${item_title}")

                                if [[ "${item_type}" == "dash-db" ]]; then
                                    # --- Process Dashboard ---
                                    echo "  [DASHBOARD] '${item_title}'"
                                    local filename="${sanitized_title}.json"
                                    local filepath="${current_path}/${filename}"

                                    local dashboard_data
                                    dashboard_data=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/dashboards/uid/${item_uid}")
                                    
                                    if [ -n "${dashboard_data}" ] && [ "$(${JQ_CMD} -r '.dashboard.title' <<< "${dashboard_data}")" != "null" ]; then
                                        echo "${dashboard_data}" | ${JQ_CMD} '.dashboard' > "${filepath}"
                                        echo "    -> Saved to ${filepath}"
                                    else
                                        echo "    -> SKIPPED (empty or invalid data from API for dashboard UID ${item_uid})"
                                    fi

                                elif [[ "${item_type}" == "dash-folder" ]]; then
                                    # --- Process Sub-Folder (Recurse) ---
                                    echo "  [SUB-FOLDER] '${item_title}'"
                                    local sub_folder_path="${current_path}/${sanitized_title}"
                                    # This is the recursive call for the sub-folder.
                                    process_folder "${item_uid}" "${sub_folder_path}"
                                fi
                            done
                        }

                        # Export functions and variables to make them available in subshells created by the 'while read' loop.
                        export -f sanitize_filename
                        export -f process_folder
                        export CURL_CMD JQ_CMD GRAFANA_API_KEY GRAFANA_URL

                        # --- Main Execution ---

                        echo "Finding UID for root folder: '${GRAFANA_ROOT_FOLDER}'..."
                        # 1. Find the UID of the root folder by its title.
                        ROOT_FOLDER_UID=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
                            "${GRAFANA_URL}/api/search?type=dash-folder&query=" | \
                            ${JQ_CMD} -r --arg title "${GRAFANA_ROOT_FOLDER}" '.[] | select(.title == $title) | .uid' | head -n 1)

                        if [ -z "${ROOT_FOLDER_UID}" ]; then
                            echo "Error: Root folder '${GRAFANA_ROOT_FOLDER}' not found in Grafana."
                            exit 1
                        fi
                        echo "Found root folder UID: ${ROOT_FOLDER_UID}"

                        # 2. Kick off the recursive backup process starting from the root folder.
                        process_folder "${ROOT_FOLDER_UID}" "${GRAFANA_BACKUP_DIR}"

                        echo "Backup complete."
                    '''

                    writeFile(file: 'run_grafana_backup.sh', text: grafanaBackupScriptContent)
                    sh 'chmod +x run_grafana_backup.sh'
                    sh './run_grafana_backup.sh'
                }
            }
        }
        
        // This stage commits and pushes the backup to your Git repository.
        stage('Commit and Push Changes to Git') {
            when {
                branch 'master'
            }
            steps {
                script {
                    sh "git config user.email 'jenkins@example.com'"
                    sh "git config user.name 'Jenkins Automated Backup'"
                    sh "git add --all ${env.GRAFANA_BACKUP_DIR}"

                    // Check if there are any changes to commit before proceeding.
                    def changes = sh(returnStatus: true, script: "git diff-index --quiet HEAD -- ${env.GRAFANA_BACKUP_DIR}")
                    
                    if (changes != 0) {
                        sh 'git commit -m "Grafana Dashboards Backup - $(date +%Y-%m-%d_%H-%M-%S)"'
                        
                        withCredentials([string(credentialsId: 'github-creds1', variable: 'GIT_PAT')]) {
                            sh '''
                                git remote set-url origin https://github.com/joe06031990/test
                                git config credential.helper store
                                echo "https://${GIT_PAT}:@github.com" > ~/.git-credentials
                                git push origin HEAD:master
                            '''
                        }
                    } else {
                        echo "No changes detected in Grafana dashboards."
                    }
                }
            }
        }
    }

    // Post-build actions that run regardless of the pipeline's status.
    post {
        always {
            // Clean the workspace to ensure the next run is clean.
            cleanWs()
        }
    }
}
